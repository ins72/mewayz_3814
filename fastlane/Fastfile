# Mewayz Fastlane Configuration for Automated Deployment

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

# Global variables
APP_NAME = "Mewayz"
PACKAGE_NAME = "com.mewayz.app"
BUNDLE_ID = "com.mewayz.app"

# Android Platform
platform :android do
  desc "Validate Android configuration"
  lane :validate do
    # Run validation checks
    sh("../scripts/validate_production.sh")
    
    # Run lint checks
    gradle(
      task: "lint",
      project_dir: "android/"
    )
    
    # Run unit tests
    gradle(
      task: "test",
      project_dir: "android/"
    )
  end
  
  desc "Build Android production release"
  lane :build do
    # Clean previous builds
    sh("flutter clean")
    sh("flutter pub get")
    
    # Run tests
    sh("flutter test")
    
    # Build app bundle
    sh("flutter build appbundle --release --obfuscate --split-debug-info=build/debug-info")
    
    # Build APK
    sh("flutter build apk --release --obfuscate --split-debug-info=build/debug-info")
  end
  
  desc "Deploy to Google Play Store (Internal Testing)"
  lane :deploy_internal do
    validate
    build
    
    # Upload to Play Store Internal Testing
    upload_to_play_store(
      track: "internal",
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    # Send notification
    slack(
      message: "üöÄ #{APP_NAME} Android build successfully deployed to Internal Testing!",
      success: true
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
  
  desc "Deploy to Google Play Store (Production)"
  lane :deploy_production do
    validate
    build
    
    # Upload to Play Store Production
    upload_to_play_store(
      track: "production",
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    # Send notification
    slack(
      message: "üéâ #{APP_NAME} Android build successfully deployed to Production!",
      success: true
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
  
  desc "Deploy to Google Play Store (Beta Testing)"
  lane :deploy_beta do
    validate
    build
    
    # Upload to Play Store Beta Testing
    upload_to_play_store(
      track: "beta",
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    # Send notification
    slack(
      message: "üß™ #{APP_NAME} Android build successfully deployed to Beta Testing!",
      success: true
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
  
  desc "Update metadata on Google Play Store"
  lane :update_metadata do
    upload_to_play_store(
      skip_upload_aab: true,
      skip_upload_apk: true,
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
  end
end

# iOS Platform
platform :ios do
  desc "Validate iOS configuration"
  lane :validate do
    # Run validation checks
    sh("../scripts/validate_production.sh")
    
    # Verify certificates and provisioning profiles
    match(
      type: "appstore",
      readonly: true
    )
  end
  
  desc "Build iOS production release"
  lane :build do
    # Clean previous builds
    sh("flutter clean")
    sh("flutter pub get")
    
    # Run tests
    sh("flutter test")
    
    # Build iOS app
    sh("flutter build ios --release --obfuscate --split-debug-info=build/debug-info")
    
    # Build and archive
    build_app(
      workspace: "ios/Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      output_directory: "build/ios/ipa",
      output_name: "mewayz.ipa"
    )
  end
  
  desc "Deploy to App Store (TestFlight)"
  lane :deploy_testflight do
    validate
    build
    
    # Upload to TestFlight
    upload_to_testflight(
      ipa: "build/ios/ipa/mewayz.ipa",
      skip_waiting_for_build_processing: false,
      skip_submission: true
    )
    
    # Send notification
    slack(
      message: "üöÄ #{APP_NAME} iOS build successfully deployed to TestFlight!",
      success: true
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
  
  desc "Deploy to App Store (Production)"
  lane :deploy_production do
    validate
    build
    
    # Upload to App Store
    upload_to_app_store(
      ipa: "build/ios/ipa/mewayz.ipa",
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: true,
      automatic_release: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        add_id_info_serves_ads: false,
        add_id_info_tracks_install: false,
        add_id_info_tracks_action: false,
        add_id_info_limits_tracking: false,
        content_rights_has_rights: true,
        content_rights_contains_third_party_content: false,
        export_compliance_platform: "ios",
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false,
        export_compliance_available_on_french_store: false
      }
    )
    
    # Send notification
    slack(
      message: "üéâ #{APP_NAME} iOS build successfully deployed to App Store!",
      success: true
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
  
  desc "Update metadata on App Store"
  lane :update_metadata do
    upload_to_app_store(
      skip_binary_upload: true,
      skip_metadata: false,
      skip_screenshots: false
    )
  end
  
  desc "Setup certificates and provisioning profiles"
  lane :setup_certificates do
    match(
      type: "development",
      force: true
    )
    
    match(
      type: "appstore",
      force: true
    )
  end
end

# Cross-platform lanes
desc "Run all tests"
lane :test do
  sh("flutter test --coverage")
  sh("flutter analyze")
end

desc "Deploy to both platforms (Production)"
lane :deploy_all_production do
  # Deploy Android
  android do
    deploy_production
  end
  
  # Deploy iOS (only on macOS)
  if FastlaneCore::Helper.mac?
    ios do
      deploy_production
    end
  end
  
  # Send consolidated notification
  slack(
    message: "üöÄ #{APP_NAME} successfully deployed to both App Store and Google Play Store!",
    success: true
  ) if ENV["SLACK_WEBHOOK_URL"]
end

desc "Deploy to both platforms (Beta/TestFlight)"
lane :deploy_all_beta do
  # Deploy Android Beta
  android do
    deploy_beta
  end
  
  # Deploy iOS TestFlight (only on macOS)
  if FastlaneCore::Helper.mac?
    ios do
      deploy_testflight
    end
  end
  
  # Send consolidated notification
  slack(
    message: "üß™ #{APP_NAME} successfully deployed to both TestFlight and Google Play Beta!",
    success: true
  ) if ENV["SLACK_WEBHOOK_URL"]
end

desc "Update metadata on both platforms"
lane :update_all_metadata do
  # Update Android metadata
  android do
    update_metadata
  end
  
  # Update iOS metadata (only on macOS)
  if FastlaneCore::Helper.mac?
    ios do
      update_metadata
    end
  end
end

# Error handling
error do |lane, exception|
  slack(
    message: "‚ùå #{APP_NAME} deployment failed in lane '#{lane}': #{exception.message}",
    success: false
  ) if ENV["SLACK_WEBHOOK_URL"]
end

# Helper methods
def get_version_number
  version_line = File.read("../pubspec.yaml").lines.find { |line| line.include?("version:") }
  return version_line.split(":")[1].strip if version_line
  return "1.0.0"
end

def get_build_number
  version = get_version_number
  return version.split("+")[1] if version.include?("+")
  return "1"
end

def increment_build_number
  version = get_version_number
  if version.include?("+")
    version_parts = version.split("+")
    new_build = (version_parts[1].to_i + 1).to_s
    new_version = "#{version_parts[0]}+#{new_build}"
  else
    new_version = "#{version}+2"
  end
  
  # Update pubspec.yaml
  pubspec_content = File.read("../pubspec.yaml")
  updated_content = pubspec_content.gsub(/version: .*/, "version: #{new_version}")
  File.write("../pubspec.yaml", updated_content)
  
  return new_version
end

# Before all lanes
before_all do
  ensure_env_vars(
    env_vars: ["FLUTTER_ROOT"]
  )
  
  # Validate Flutter installation
  sh("flutter doctor")
  
  # Clean and get dependencies
  sh("flutter clean")
  sh("flutter pub get")
end

# After all lanes
after_all do |lane|
  # Clean up temporary files
  sh("flutter clean") if lane.to_s.include?("build")
  
  # Success notification
  puts "‚úÖ Lane '#{lane}' completed successfully!"
end