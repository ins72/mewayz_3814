# Mewayz Fastfile for automated deployment

default_platform(:android)

platform :android do
  desc "Deploy to Google Play Store"
  lane :deploy do
    begin
      # Load environment variables
      load_env_vars

      # Validate environment
      validate_android_env

      # Upload to Google Play Store
      upload_to_play_store(
        track: 'production',
        release_status: 'draft',
        aab: '../build/app/outputs/bundle/release/app-release.aab',
        json_key: ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON'],
        package_name: 'com.mewayz.app',
        skip_upload_metadata: false,
        skip_upload_images: false,
        skip_upload_screenshots: false
      )

      # Send notification
      notify_deployment_success('Android')

    rescue => exception
      notify_deployment_failure('Android', exception.message)
      raise exception
    end
  end

  desc "Deploy to Internal Testing"
  lane :deploy_internal do
    upload_to_play_store(
      track: 'internal',
      release_status: 'completed',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      json_key: ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON'],
      package_name: 'com.mewayz.app',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Deploy to Alpha Testing"
  lane :deploy_alpha do
    upload_to_play_store(
      track: 'alpha',
      release_status: 'completed',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      json_key: ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON'],
      package_name: 'com.mewayz.app',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Deploy to Beta Testing"
  lane :deploy_beta do
    upload_to_play_store(
      track: 'beta',
      release_status: 'completed',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      json_key: ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON'],
      package_name: 'com.mewayz.app',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  private_lane :load_env_vars do
    # Load environment variables from .env file
    env_file = File.join(Dir.pwd, '..', '.env')
    if File.exist?(env_file)
      File.foreach(env_file) do |line|
        next if line.strip.empty? || line.strip.start_with?('#')
        key, value = line.strip.split('=', 2)
        ENV[key] = value if key && value
      end
    end
  end

  private_lane :validate_android_env do
    required_vars = [
      'GOOGLE_PLAY_SERVICE_ACCOUNT_JSON',
      'APP_VERSION',
      'BUILD_NUMBER'
    ]

    missing_vars = required_vars.select { |var| ENV[var].nil? || ENV[var].empty? }
    
    unless missing_vars.empty?
      UI.user_error!("Missing required environment variables: #{missing_vars.join(', ')}")
    end

    unless File.exist?(ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON'])
      UI.user_error!("Google Play service account JSON file not found: #{ENV['GOOGLE_PLAY_SERVICE_ACCOUNT_JSON']}")
    end
  end

  private_lane :notify_deployment_success do |platform|
    UI.success("üéâ #{platform} deployment completed successfully!")
    UI.success("Version: #{ENV['APP_VERSION']} (#{ENV['BUILD_NUMBER']})")
    UI.success("Time: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}")
  end

  private_lane :notify_deployment_failure do |platform, error|
    UI.error("‚ùå #{platform} deployment failed!")
    UI.error("Error: #{error}")
    UI.error("Time: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}")
  end
end

platform :ios do
  desc "Deploy to App Store"
  lane :deploy do
    begin
      # Load environment variables
      load_env_vars

      # Validate environment
      validate_ios_env

      # Upload to App Store Connect
      upload_to_app_store(
        ipa: '../build/ios/ipa/mewayz.ipa',
        api_key_path: ENV['APP_STORE_CONNECT_API_KEY'],
        skip_metadata: false,
        skip_screenshots: false,
        submit_for_review: false,
        automatic_release: false,
        force: true
      )

      # Send notification
      notify_deployment_success('iOS')

    rescue => exception
      notify_deployment_failure('iOS', exception.message)
      raise exception
    end
  end

  desc "Deploy to TestFlight"
  lane :deploy_testflight do
    upload_to_testflight(
      ipa: '../build/ios/ipa/mewayz.ipa',
      api_key_path: ENV['APP_STORE_CONNECT_API_KEY'],
      skip_waiting_for_build_processing: true,
      skip_submission: true
    )
  end

  desc "Deploy to TestFlight Internal"
  lane :deploy_testflight_internal do
    upload_to_testflight(
      ipa: '../build/ios/ipa/mewayz.ipa',
      api_key_path: ENV['APP_STORE_CONNECT_API_KEY'],
      distribute_external: false,
      skip_waiting_for_build_processing: true
    )
  end

  private_lane :validate_ios_env do
    required_vars = [
      'APP_STORE_CONNECT_API_KEY',
      'APP_STORE_CONNECT_ISSUER_ID',
      'APP_STORE_CONNECT_KEY_ID',
      'APP_VERSION',
      'BUILD_NUMBER'
    ]

    missing_vars = required_vars.select { |var| ENV[var].nil? || ENV[var].empty? }
    
    unless missing_vars.empty?
      UI.user_error!("Missing required environment variables: #{missing_vars.join(', ')}")
    end

    unless File.exist?(ENV['APP_STORE_CONNECT_API_KEY'])
      UI.user_error!("App Store Connect API key file not found: #{ENV['APP_STORE_CONNECT_API_KEY']}")
    end
  end
end

# Cross-platform lanes
desc "Deploy to both platforms"
lane :deploy_all do
  deploy_android
  deploy_ios if is_ci || UI.confirm("Deploy to iOS as well?")
end

desc "Deploy to Android"
lane :deploy_android do
  android_deploy
end

desc "Deploy to iOS"
lane :deploy_ios do
  ios_deploy
end

desc "Run tests"
lane :test do
  sh("cd .. && flutter test")
end

desc "Analyze code"
lane :analyze do
  sh("cd .. && flutter analyze")
end

desc "Format code"
lane :format do
  sh("cd .. && flutter format lib/ test/")
end

desc "Check code quality"
lane :quality_check do
  analyze
  test
  UI.success("‚úÖ Code quality check passed!")
end

# Helper methods
def load_env_vars
  env_file = File.join(Dir.pwd, '..', '.env')
  if File.exist?(env_file)
    File.foreach(env_file) do |line|
      next if line.strip.empty? || line.strip.start_with?('#')
      key, value = line.strip.split('=', 2)
      ENV[key] = value if key && value
    end
  end
end

def notify_deployment_success(platform)
  UI.success("üéâ #{platform} deployment completed successfully!")
  UI.success("Version: #{ENV['APP_VERSION']} (#{ENV['BUILD_NUMBER']})")
  UI.success("Time: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}")
end

def notify_deployment_failure(platform, error)
  UI.error("‚ùå #{platform} deployment failed!")
  UI.error("Error: #{error}")
  UI.error("Time: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}")
end

# Error handling
error do |lane, exception|
  UI.error("Lane #{lane} failed with exception: #{exception}")
end